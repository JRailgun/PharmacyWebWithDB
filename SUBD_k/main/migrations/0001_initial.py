# Generated by Django 3.2.16 on 2022-12-07 13:08

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('t_name', models.CharField(blank=True, help_text='Введите отчество пользователя', max_length=50, null=True, verbose_name='Отчество')),
                ('name_company', models.CharField(blank=True, help_text='Введите название компании', max_length=50, null=True, verbose_name='Название компании')),
                ('INN', models.BigIntegerField(blank=True, help_text='Введите ИНН', null=True, verbose_name='ИНН')),
                ('KPP', models.BigIntegerField(blank=True, help_text='Введите КПП', null=True, verbose_name='КПП')),
                ('mail', models.CharField(help_text='Введите почту', max_length=50, verbose_name='Почта')),
                ('date_birth', models.DateField(help_text='Введите дату рождения', verbose_name='Дата рождения')),
                ('phone_number', models.BigIntegerField(help_text='Введите номер телефона', verbose_name='Номер телефона')),
                ('user_photo', models.ImageField(blank=True, help_text='Выберите изображение', null=True, upload_to='media/', verbose_name='Фото пользователя')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Adress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(help_text='Введите название страны', max_length=50, verbose_name='Страна')),
                ('city', models.CharField(help_text='Введите название города', max_length=50, verbose_name='Город')),
                ('street', models.CharField(help_text='Введите название улицы', max_length=50, verbose_name='Улица')),
                ('num_house', models.IntegerField(help_text='Введите номер дома', verbose_name='Номер дома')),
                ('num_apart', models.IntegerField(blank=True, help_text='Введите номер квартиры', null=True, verbose_name='Номер квартиры')),
            ],
            options={
                'verbose_name': 'Адрес',
                'verbose_name_plural': 'Адреса',
            },
        ),
        migrations.CreateModel(
            name='Creator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_creator', models.CharField(help_text='Введите название производителя', max_length=50, verbose_name='Название производителя')),
                ('INN', models.BigIntegerField(help_text='Введите ИНН производителя', verbose_name='ИНН')),
                ('KPP', models.BigIntegerField(help_text='Введите КПП производителя', verbose_name='КПП')),
                ('creator_phone', models.BigIntegerField(help_text='Введите номер телефона', verbose_name='Номер телефона')),
                ('adress_id', models.ForeignKey(help_text='Введите адрес производителя', on_delete=django.db.models.deletion.CASCADE, to='main.adress', verbose_name='Адрес производителя')),
            ],
            options={
                'verbose_name': 'Производитель',
                'verbose_name_plural': 'Производители',
            },
        ),
        migrations.CreateModel(
            name='Med_group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_group', models.CharField(help_text='Введите название группы', max_length=50, verbose_name='Название группы лекарств')),
            ],
            options={
                'verbose_name': 'Группа лекарств',
                'verbose_name_plural': 'Группы лекарств',
            },
        ),
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_roles', models.CharField(help_text='Введите название роли', max_length=50, verbose_name='Роль')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
            },
        ),
        migrations.CreateModel(
            name='Shipper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_shipper', models.CharField(help_text='Введите название поставщика', max_length=50, verbose_name='Название поставщика')),
                ('INN', models.BigIntegerField(help_text='Введите ИНН поставщика', verbose_name='ИНН')),
                ('KPP', models.BigIntegerField(help_text='Введите КПП поставщика', verbose_name='КПП')),
                ('shipper_phone', models.BigIntegerField(help_text='Введите номер телефона', verbose_name='Номер телефона')),
                ('logo_shipper', models.ImageField(blank=True, help_text='Выберите изображение', null=True, upload_to='media/', verbose_name='Лого поставщика')),
                ('adress_id', models.ForeignKey(help_text='Введите адрес поставщика', on_delete=django.db.models.deletion.CASCADE, to='main.adress', verbose_name='Адрес поставщика')),
            ],
            options={
                'verbose_name': 'Поставщик',
                'verbose_name_plural': 'Поставщики',
            },
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_sale', models.DateTimeField(help_text='Введите дату и время продажи', verbose_name='Дата и время продажи')),
                ('user_id', models.ForeignKey(help_text='Выберите сотрудника', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Сотрудник')),
            ],
            options={
                'verbose_name': 'Продажа',
                'verbose_name_plural': 'Продажи',
            },
        ),
        migrations.CreateModel(
            name='Med',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_med', models.CharField(help_text='Введите название лекарства', max_length=50, verbose_name='Название лекарства')),
                ('price', models.IntegerField(help_text='Введите цену', verbose_name='Цена')),
                ('quantity', models.IntegerField(help_text='Введите количество, шт.', verbose_name='Количество, шт.')),
                ('creator_id', models.ForeignKey(help_text='Выберите производителя', on_delete=django.db.models.deletion.CASCADE, to='main.creator', verbose_name='Производитель')),
                ('med_group_id', models.ForeignKey(help_text='Выберите группу лекарств', on_delete=django.db.models.deletion.CASCADE, to='main.med_group', verbose_name='Группа лекарств')),
            ],
            options={
                'verbose_name': 'Лекарство',
                'verbose_name_plural': 'Лекарства',
            },
        ),
        migrations.CreateModel(
            name='Clients',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_name', models.CharField(help_text='Введите имя клиента', max_length=50, verbose_name='Имя')),
                ('s_name', models.CharField(help_text='Введите фамилию клиента', max_length=50, verbose_name='Фамилия')),
                ('t_name', models.CharField(blank=True, help_text='Введите отчество клиента', max_length=50, null=True, verbose_name='Отчество')),
                ('name_company', models.CharField(blank=True, help_text='Введите название компании', max_length=50, null=True, verbose_name='Название компании')),
                ('INN', models.BigIntegerField(blank=True, help_text='Введите ИНН', null=True, verbose_name='ИНН')),
                ('KPP', models.BigIntegerField(blank=True, help_text='Введите КПП', null=True, verbose_name='КПП')),
                ('mail', models.CharField(help_text='Введите почту', max_length=50, verbose_name='Почта')),
                ('datetime_reg', models.DateTimeField(help_text='Введите дату и время регистрации', verbose_name='Дата и время регистрации')),
                ('date_birth', models.DateField(help_text='Введите дату рождения', verbose_name='Дата рождения')),
                ('phone_number', models.BigIntegerField(help_text='Введите номер телефона', verbose_name='Номер телефона')),
                ('client_photo', models.ImageField(blank=True, help_text='Выберите изображение', null=True, upload_to='media/', verbose_name='Фото клиента')),
                ('logo_company', models.ImageField(blank=True, help_text='Выберите изображение', null=True, upload_to='media/', verbose_name='Лого компании')),
                ('adress_id', models.ForeignKey(help_text='Введите адрес клиента', on_delete=django.db.models.deletion.CASCADE, to='main.adress', verbose_name='Адрес клиента')),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='roles_id',
            field=models.ForeignKey(help_text='Выберите должность сотрудника', on_delete=django.db.models.deletion.CASCADE, to='main.roles', verbose_name='Должность сотрудника'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
